{"version":3,"sources":["App.js","index.js","qrimg.jpeg"],"names":["App","img","setimg","useState","Img","load","setload","qrdata","setqrdata","size","setSize","React","createElement","src","alt","className","type","id","placeholder","onChange","e","target","value","onClick","url","concat","encodeURIComponent","error","console","log","link","document","href","download","click","ReactDOM","createRoot","getElementById","render","StrictMode","module","exports","__webpack_require__","p"],"mappings":"iLAqDeA,MAnDHA,KAEV,MAAMC,EAAIC,GAAQC,mBAASC,MACrBC,EAAKC,GAASH,oBAAS,IACvBI,EAAOC,GAAWL,mBAAS,KAC3BM,EAAKC,GAASP,mBAAS,KAgB7B,OACEQ,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,qBAEHP,GAAQM,IAAAC,cAAA,SAAG,eACZD,IAAAC,cAAA,OAAKC,IAAKZ,EAAMa,IAAK,SAASC,UAAU,WAExCJ,IAAAC,cAAA,SAAOG,UAAU,eAAc,oBAC/BJ,IAAAC,cAAA,SAAOI,KAAK,OAAOC,GAAG,aAAaC,YAAY,yBAAyBC,SAAWC,GAAIZ,EAAUY,EAAEC,OAAOC,SAC1GX,IAAAC,cAAA,SAAOG,UAAU,eAAc,qBAG/BJ,IAAAC,cAAA,SAAOI,KAAK,OAAOC,GAAG,YAAYC,YAAY,mBAAmBC,SAAWC,GAAIV,EAAQU,EAAEC,OAAOC,SACjGX,IAAAC,cAAA,UAAQG,UAAU,UAAUQ,QA3BhC,WAEA,IACKjB,GAAQ,GACR,MAAMkB,EAAG,oDAAAC,OAAqDC,mBAAmBnB,GAAO,UAAAkB,OAAShB,EAAI,KAAAgB,OAAIhB,GACzGP,EAAOsB,GAEZ,MAAMG,GACJC,QAAQC,IAAI,6CACb,QAECvB,GAAQ,KAgBuCe,OAAO,UAAS,oBAC7DV,IAAAC,cAAA,UACEG,UAAU,WACVQ,QAASA,KACP,MAAMO,EAAOC,SAASnB,cAAc,KACpCkB,EAAKE,KAAO/B,EACZ6B,EAAKG,SAAW,WAChBH,EAAKI,UAER,2BCvCMC,IAASC,WAAWL,SAASM,eAAe,SACpDC,OACH3B,IAAAC,cAACD,IAAM4B,WAAU,KACf5B,IAAAC,cAACZ,EAAG,2BCTRwC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.1b135bfb.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport Img from'./qrimg.jpeg';\nconst App = () => {\n  // parameters\n  const[img,setimg]=useState(Img);\n  const[load,setload]=useState(false);\n  const[qrdata,setqrdata]=useState(\"\");\n  const[size,setSize]=useState(150);\n\n  function Qr_gen()\n  {\n  try{\n       setload(true);\n       const url=`https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(qrdata)}&size=${size}x${size}`;\n       setimg(url);\n  }\n  catch(error){\n    console.log(\"Error occurs while gendrating the Qr-Code\")\n  }\n  finally{\n    setload(false);\n  }\n}\n  return (\n    <div>\n      <h1>QR CODE GENERATOR</h1>\n      {/* conditional renderring */}\n      {load && <p>please wait</p>}\n      <img src={img}  alt ='qr-box' className='QR-img'></img>\n\n      <label className='input-label'>Data for QR-Code</label>\n      <input type=\"text\" id=\"data-input\" placeholder='Enter data for Qr code' onChange={(e)=>setqrdata(e.target.value)}></input>\n      <label className='input-label'>\n        ImageSize(eg:150)\n      </label>\n      <input type=\"text\" id=\"sizeinput\" placeholder='Enter image size' onChange={(e)=>setSize(e.target.value)}></input>\n      <button className=\"gen-btn\" onClick={Qr_gen} target=\"_blank\">Gendrate QR-Code</button>\n      <button\n        className=\"download\"\n        onClick={() => {\n          const link = document.createElement('a');\n          link.href = img;\n          link.download = 'code.png';\n          link.click();\n        }}\n      >\n        Download Your QR Code\n      </button>\n      \n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/qrimg.183ce40a.jpeg\";"],"sourceRoot":""}